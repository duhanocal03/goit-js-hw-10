{"version":3,"file":"page-2.js","sources":["../src/js/01-timer.js"],"sourcesContent":["  // Elements\n    const datetimePicker = document.querySelector('#datetime-picker');\n    const startBtn = document.querySelector('[data-start]');\n    const daysEl = document.querySelector('[data-days]');\n    const hoursEl = document.querySelector('[data-hours]');\n    const minutesEl = document.querySelector('[data-minutes]');\n    const secondsEl = document.querySelector('[data-seconds]');\n\n    // State\n    let userSelectedDate = null;\n    let countdownInterval = null;\n\n    // flatpickr options (as specified)\n    const options = {\n      enableTime: true,\n      time_24hr: true,\n      defaultDate: new Date(),\n      minuteIncrement: 1,\n      onClose(selectedDates) {\n        // selectedDates is an array; take first\n        const picked = selectedDates[0];\n        if (!picked) return;\n\n        // Store and validate\n        const now = new Date();\n        if (picked <= now) {\n          userSelectedDate = null;\n          startBtn.disabled = true;\n          iziToast.warning({\n            title: 'Danger',\n            message: 'Please choose a date in the future',\n            position: 'topRight',\n            timeout: 3000\n          });\n          return;\n        }\n\n        userSelectedDate = picked;\n        startBtn.disabled = false;\n      },\n    };\n\n    const fp = flatpickr(datetimePicker, options);\n\n    // ms çeviricileri\n    function convertMs(ms) {\n      const second = 1000;\n      const minute = second * 60;\n      const hour = minute * 60;\n      const day = hour * 24;\n\n      const days = Math.floor(ms / day);\n      const hours = Math.floor((ms % day) / hour);\n      const minutes = Math.floor(((ms % day) % hour) / minute);\n      const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n      return { days, hours, minutes, seconds };\n    }\n\n    // Helper: pad numbers to at least 2 digits (but allow days > 2 digits)\n    function addLeadingZero(value) {\n      const str = String(value);\n      return str.length < 2 ? str.padStart(2, '0') : str;\n    }\n\n    // Update UI with the converted values\n    function updateUI({ days, hours, minutes, seconds }) {\n      // Days can be more than two digits, but if single-digit add leading zero\n      daysEl.textContent = addLeadingZero(days);\n      hoursEl.textContent = addLeadingZero(hours);\n      minutesEl.textContent = addLeadingZero(minutes);\n      secondsEl.textContent = addLeadingZero(seconds);\n    }\n\n    // başlat butonu\n    startBtn.addEventListener('click', () => {\n      if (!userSelectedDate) return;\n\n      // Once started, disable controls as required\n      startBtn.disabled = true;\n      datetimePicker.disabled = true;\n      // If you want to prevent opening the calendar too: destroy flatpickr instance so user cannot change\n      try { fp.close(); fp.destroy(); } catch (e) {}\n\n      // Run immediately (so UI updates without 1s delay)\n      tick();\n      countdownInterval = setInterval(tick, 1000);\n    });\n\n    // The repeated tick function\n    function tick() {\n      const now = new Date();\n      const delta = userSelectedDate - now;\n\n      if (delta <= 0) {\n        // Time's up\n        clearInterval(countdownInterval);\n        updateUI({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n        iziToast.success({ title: 'Bitti', message: 'The countdown has reached the target date.', position: 'topRight', timeout: 3000 });\n        return;\n      }\n\n      const time = convertMs(delta);\n      updateUI(time);\n    }\n\n    // Ensure Start button is disabled at load\n    startBtn.disabled = true;\n\n    // Accessibility: if user presses Enter while input focused and a valid date chosen, start\n    datetimePicker.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && !startBtn.disabled) {\n        startBtn.click();\n      }\n    });"],"names":["datetimePicker","startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","countdownInterval","options","selectedDates","picked","fp","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","str","updateUI","tick","delta","time","e"],"mappings":"oCACI,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAGzD,IAAIC,EAAmB,KACnBC,EAAoB,KAGxB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,MAAMC,EAASD,EAAc,CAAC,EAC9B,GAAI,CAACC,EAAQ,OAIb,GAAIA,GADQ,IAAI,KACG,CACjBJ,EAAmB,KACnBL,EAAS,SAAW,GACpB,SAAS,QAAQ,CACf,MAAO,SACP,QAAS,qCACT,SAAU,WACV,QAAS,GACrB,CAAW,EACD,MACD,CAEDK,EAAmBI,EACnBT,EAAS,SAAW,EACrB,CACP,EAEUU,EAAK,UAAUX,EAAgBQ,CAAO,EAG5C,SAASI,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAGD,SAASC,EAAeC,EAAO,CAC7B,MAAMC,EAAM,OAAOD,CAAK,EACxB,OAAOC,EAAI,OAAS,EAAIA,EAAI,SAAS,EAAG,GAAG,EAAIA,CAChD,CAGD,SAASC,EAAS,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAEnDf,EAAO,YAAcgB,EAAeJ,CAAI,EACxCX,EAAQ,YAAce,EAAeH,CAAK,EAC1CX,EAAU,YAAcc,EAAeF,CAAO,EAC9CX,EAAU,YAAca,EAAeD,CAAO,CAC/C,CAGDhB,EAAS,iBAAiB,QAAS,IAAM,CACvC,GAAKK,EAGL,CAAAL,EAAS,SAAW,GACpBD,EAAe,SAAW,GAE1B,GAAI,CAAEW,EAAG,MAAK,EAAIA,EAAG,SAAU,MAAa,CAAE,CAG9CW,IACAf,EAAoB,YAAYe,EAAM,GAAI,EAChD,CAAK,EAGD,SAASA,GAAO,CAEd,MAAMC,EAAQjB,EADF,IAAI,KAGhB,GAAIiB,GAAS,EAAG,CAEd,cAAchB,CAAiB,EAC/Bc,EAAS,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACtD,SAAS,QAAQ,CAAE,MAAO,QAAS,QAAS,6CAA8C,SAAU,WAAY,QAAS,GAAM,CAAA,EAC/H,MACD,CAED,MAAMG,EAAOZ,EAAUW,CAAK,EAC5BF,EAASG,CAAI,CACd,CAGDvB,EAAS,SAAW,GAGpBD,EAAe,iBAAiB,UAAYyB,GAAM,CAC5CA,EAAE,MAAQ,SAAW,CAACxB,EAAS,UACjCA,EAAS,MAAK,CAEtB,CAAK"}